class Node {
    constructor(value){
        this.value = value
        this.left = null
        this.right = null
    }
}


class BinarySearchTree {
    constructor(){
        this.root = null
    }

     insert(value){
        const node = new Node(value)
        if(this.root === null){
            this.root = node
        } else {
            this.insertNode(this.root, node)
        }
     }

     insertNode(root, node){
        if(node.value < root.value){
            if(root.left === null){
                root.left = node
            } else {
                this.insertNode(root.left, node)
            }
        } else {
            if(root.right === null){
                root.right = node
            } else {
                this.insertNode(root.right, node)
            }
        }
     }

     search(root, value){
        if(!root){
            return false
        } else {
            if(root.value === value){
                return true 
            } else if(value < root.value){
                return this.search(root.left, value)
            } else {
                return this.search(root.right, value)
            }
        }
     }

     preOrder(root){
        if(root){
            console.log(root.value)
            this.preOrder(root.left)
            this.preOrder(root.right)
        }
     }

     inOrder(root){
        if(root){
            this.inOrder(root.left)
            console.log(root.value);
            this.inOrder(root.right)
        }
     }

     postOrder(root){
        if(root){
            this.postOrder(root.left)
            this.postOrder(root.right)
            console.log(root.value);
        }
     }

     levelOrder(){
        const queue = [] //------> Makes an empty array to push roots

        queue.push(this.root) //------> Push The root
        while(queue.length){  // traverse while any elements in array
            let curr = queue.shift()  // shifts the first value from array and assign it to the curr variable
            console.log(curr.value);  // ----> prints the value in curr
            if(curr.left) {   //------> If the root have left  child node
                queue.push(curr.left)  // It will push to the array
            } 
            if(curr.right){  // If the root have right child node
                queue.push(curr.right) // ----> It will push to the arary 
            }  // this repeats untill array is empty
        }
     }
     isValid(root, max, min){
        if(root === null){
            return true
        }
        
     }

     min(root){
        if(!root.left){
            return root.value
        } else {
            return this.min(root.left)
        }
     }

     max(root){
        if(!root.right){
            return root.value
        } else {
            return this.max(root.right)
        }
     }

     delete(value) {
        this.root = this.deleteNode(this.root, value)
     } 

     deleteNode(root,value){
        if(root === null){
            return root
        } 
        if(value < root.value){
            root.left = this.deleteNode(root.left, value)
        } else if(value > root.value) {
            root.right = this.deleteNode(root.right, value)
        } else {
            if(!root.left && !root.right){
                return null
            }
            if(!root.left){
                return root.right
            } else if (!root.right) {
                return root.left
            } 
            root.value = this.min(root.right)
            root.right = this.deleteNode(root.right, root.value)
        }
        return root
     }

}


const bst = new BinarySearchTree()

bst.insert(15)
bst.insert(10)
bst.insert(10) 
bst.insert(16)
bst.insert(4)
bst.insert(58)
console.log(bst.root.value);
// bst.inOrder(bst.root)
bst.delete(15)
// bst.preOrder(bst.root)
// bst.postOrder(bst.root)
bst.levelOrder(bst.root)
console.log(bst.min(bst.root));
console.log(bst.max(bst.root));
console.log(bst.search(bst.root, 10));